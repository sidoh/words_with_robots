/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sidoh.words_with_robots.move_generation.params;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class IterativeDeepeningParams implements org.apache.thrift.TBase<IterativeDeepeningParams, IterativeDeepeningParams._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IterativeDeepeningParams");

  private static final org.apache.thrift.protocol.TField MAX_EXECUTION_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxExecutionTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField VERBOSE_STATS_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("verboseStatsEnabled", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IterativeDeepeningParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IterativeDeepeningParamsTupleSchemeFactory());
  }

  /**
   * Maximum number of milliseconds to let the algorithm run. Iterative
   * deepening works by iteratively incrementing the number of lookahead
   * plies until it runs out of time.
   */
  public long maxExecutionTime; // optional
  /**
   * Maximum number of milliseconds to let the algorithm run. Iterative deepening works by
   * iteratively incrementing the number of lookahead plies until it runs out of time.
   */
  public boolean verboseStatsEnabled; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * Maximum number of milliseconds to let the algorithm run. Iterative
     * deepening works by iteratively incrementing the number of lookahead
     * plies until it runs out of time.
     */
    MAX_EXECUTION_TIME((short)1, "maxExecutionTime"),
    /**
     * Maximum number of milliseconds to let the algorithm run. Iterative deepening works by
     * iteratively incrementing the number of lookahead plies until it runs out of time.
     */
    VERBOSE_STATS_ENABLED((short)2, "verboseStatsEnabled");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAX_EXECUTION_TIME
          return MAX_EXECUTION_TIME;
        case 2: // VERBOSE_STATS_ENABLED
          return VERBOSE_STATS_ENABLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXEXECUTIONTIME_ISSET_ID = 0;
  private static final int __VERBOSESTATSENABLED_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.MAX_EXECUTION_TIME,_Fields.VERBOSE_STATS_ENABLED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAX_EXECUTION_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxExecutionTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERBOSE_STATS_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("verboseStatsEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IterativeDeepeningParams.class, metaDataMap);
  }

  public IterativeDeepeningParams() {
    this.maxExecutionTime = 120000L;

    this.verboseStatsEnabled = true;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IterativeDeepeningParams(IterativeDeepeningParams other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.maxExecutionTime = other.maxExecutionTime;
    this.verboseStatsEnabled = other.verboseStatsEnabled;
  }

  public IterativeDeepeningParams deepCopy() {
    return new IterativeDeepeningParams(this);
  }

  @Override
  public void clear() {
    this.maxExecutionTime = 120000L;

    this.verboseStatsEnabled = true;

  }

  /**
   * Maximum number of milliseconds to let the algorithm run. Iterative
   * deepening works by iteratively incrementing the number of lookahead
   * plies until it runs out of time.
   */
  public long getMaxExecutionTime() {
    return this.maxExecutionTime;
  }

  /**
   * Maximum number of milliseconds to let the algorithm run. Iterative
   * deepening works by iteratively incrementing the number of lookahead
   * plies until it runs out of time.
   */
  public IterativeDeepeningParams setMaxExecutionTime(long maxExecutionTime) {
    this.maxExecutionTime = maxExecutionTime;
    setMaxExecutionTimeIsSet(true);
    return this;
  }

  public void unsetMaxExecutionTime() {
    __isset_bit_vector.clear(__MAXEXECUTIONTIME_ISSET_ID);
  }

  /** Returns true if field maxExecutionTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxExecutionTime() {
    return __isset_bit_vector.get(__MAXEXECUTIONTIME_ISSET_ID);
  }

  public void setMaxExecutionTimeIsSet(boolean value) {
    __isset_bit_vector.set(__MAXEXECUTIONTIME_ISSET_ID, value);
  }

  /**
   * Maximum number of milliseconds to let the algorithm run. Iterative deepening works by
   * iteratively incrementing the number of lookahead plies until it runs out of time.
   */
  public boolean isVerboseStatsEnabled() {
    return this.verboseStatsEnabled;
  }

  /**
   * Maximum number of milliseconds to let the algorithm run. Iterative deepening works by
   * iteratively incrementing the number of lookahead plies until it runs out of time.
   */
  public IterativeDeepeningParams setVerboseStatsEnabled(boolean verboseStatsEnabled) {
    this.verboseStatsEnabled = verboseStatsEnabled;
    setVerboseStatsEnabledIsSet(true);
    return this;
  }

  public void unsetVerboseStatsEnabled() {
    __isset_bit_vector.clear(__VERBOSESTATSENABLED_ISSET_ID);
  }

  /** Returns true if field verboseStatsEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetVerboseStatsEnabled() {
    return __isset_bit_vector.get(__VERBOSESTATSENABLED_ISSET_ID);
  }

  public void setVerboseStatsEnabledIsSet(boolean value) {
    __isset_bit_vector.set(__VERBOSESTATSENABLED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAX_EXECUTION_TIME:
      if (value == null) {
        unsetMaxExecutionTime();
      } else {
        setMaxExecutionTime((Long)value);
      }
      break;

    case VERBOSE_STATS_ENABLED:
      if (value == null) {
        unsetVerboseStatsEnabled();
      } else {
        setVerboseStatsEnabled((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAX_EXECUTION_TIME:
      return Long.valueOf(getMaxExecutionTime());

    case VERBOSE_STATS_ENABLED:
      return Boolean.valueOf(isVerboseStatsEnabled());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAX_EXECUTION_TIME:
      return isSetMaxExecutionTime();
    case VERBOSE_STATS_ENABLED:
      return isSetVerboseStatsEnabled();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IterativeDeepeningParams)
      return this.equals((IterativeDeepeningParams)that);
    return false;
  }

  public boolean equals(IterativeDeepeningParams that) {
    if (that == null)
      return false;

    boolean this_present_maxExecutionTime = true && this.isSetMaxExecutionTime();
    boolean that_present_maxExecutionTime = true && that.isSetMaxExecutionTime();
    if (this_present_maxExecutionTime || that_present_maxExecutionTime) {
      if (!(this_present_maxExecutionTime && that_present_maxExecutionTime))
        return false;
      if (this.maxExecutionTime != that.maxExecutionTime)
        return false;
    }

    boolean this_present_verboseStatsEnabled = true && this.isSetVerboseStatsEnabled();
    boolean that_present_verboseStatsEnabled = true && that.isSetVerboseStatsEnabled();
    if (this_present_verboseStatsEnabled || that_present_verboseStatsEnabled) {
      if (!(this_present_verboseStatsEnabled && that_present_verboseStatsEnabled))
        return false;
      if (this.verboseStatsEnabled != that.verboseStatsEnabled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(IterativeDeepeningParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    IterativeDeepeningParams typedOther = (IterativeDeepeningParams)other;

    lastComparison = Boolean.valueOf(isSetMaxExecutionTime()).compareTo(typedOther.isSetMaxExecutionTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxExecutionTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxExecutionTime, typedOther.maxExecutionTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerboseStatsEnabled()).compareTo(typedOther.isSetVerboseStatsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerboseStatsEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verboseStatsEnabled, typedOther.verboseStatsEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IterativeDeepeningParams(");
    boolean first = true;

    if (isSetMaxExecutionTime()) {
      sb.append("maxExecutionTime:");
      sb.append(this.maxExecutionTime);
      first = false;
    }
    if (isSetVerboseStatsEnabled()) {
      if (!first) sb.append(", ");
      sb.append("verboseStatsEnabled:");
      sb.append(this.verboseStatsEnabled);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IterativeDeepeningParamsStandardSchemeFactory implements SchemeFactory {
    public IterativeDeepeningParamsStandardScheme getScheme() {
      return new IterativeDeepeningParamsStandardScheme();
    }
  }

  private static class IterativeDeepeningParamsStandardScheme extends StandardScheme<IterativeDeepeningParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IterativeDeepeningParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MAX_EXECUTION_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxExecutionTime = iprot.readI64();
              struct.setMaxExecutionTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VERBOSE_STATS_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.verboseStatsEnabled = iprot.readBool();
              struct.setVerboseStatsEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IterativeDeepeningParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMaxExecutionTime()) {
        oprot.writeFieldBegin(MAX_EXECUTION_TIME_FIELD_DESC);
        oprot.writeI64(struct.maxExecutionTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVerboseStatsEnabled()) {
        oprot.writeFieldBegin(VERBOSE_STATS_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.verboseStatsEnabled);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IterativeDeepeningParamsTupleSchemeFactory implements SchemeFactory {
    public IterativeDeepeningParamsTupleScheme getScheme() {
      return new IterativeDeepeningParamsTupleScheme();
    }
  }

  private static class IterativeDeepeningParamsTupleScheme extends TupleScheme<IterativeDeepeningParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IterativeDeepeningParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMaxExecutionTime()) {
        optionals.set(0);
      }
      if (struct.isSetVerboseStatsEnabled()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMaxExecutionTime()) {
        oprot.writeI64(struct.maxExecutionTime);
      }
      if (struct.isSetVerboseStatsEnabled()) {
        oprot.writeBool(struct.verboseStatsEnabled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IterativeDeepeningParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.maxExecutionTime = iprot.readI64();
        struct.setMaxExecutionTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.verboseStatsEnabled = iprot.readBool();
        struct.setVerboseStatsEnabledIsSet(true);
      }
    }
  }

}

